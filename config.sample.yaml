# Seed for all random data (field values) generated. This
# ensures that the same values are generated across runs. (int)
seed: 123

output:
  # Point consumer type, one of:
  #   * http (InfluxDB HTTP protocal; see `http` section)
  #   * udp (InfluxDB UDP protocol; see `udp` protocol)
  #   * stdout (InfluxDB line protocol on standard out)
  type: 'stdout'
  # 'http' output type configuration
  # See: https://godoc.org/github.com/influxdata/influxdb/client/v2#HTTPConfig
  http:
    addr: 'http://localhost:8086'
  # 'udp' output type configuration
  # See: https://godoc.org/github.com/influxdata/influxdb/client/v2#UDPConfig
  udp:
    addr: 'localhost:8089'
  # Parameters for where and how each batch of points is stored.
  # Don't forget to set `database`!
  # See: https://godoc.org/github.com/influxdata/influxdb/client/v2#BatchPointsConfig
  batchPoints:
    precision: ''  # n,u,ms,s,m,h
    database: 'infake'
    retentionPolicy: ''
    writeConsistency: 'quorum'  # one,quorum,all,any
  # Maximum number of points per batch (uint)
  batchSize: 1000
  # Maximum number of concurrent network connections to use when sending
  maxConcurrency: 25

# A series is a specification for generated measurements/points. All series
# are generated independently, in parallel.
series:
  # ID to identify this series. This is not used for anything when generating the data
  - id: http-outbound
    # Optional time range for points to generate. One point is generated for each time between
    # `from` and `to` with the `step` duration between points.
    # If omitted (e.g. commented), a single point with the current time is generated.
    timeRange:
      from: '2016-01-01T00:00:00.000000000Z'
      to: '2016-01-01T00:00:10.000000000Z'
      step: '1s'
    # Measurement name (templated; see `variables`)
    name: 'jmx-server-metrics-previous-http'
    # Tags key/value pairs. (values are templated; see `variables`)
    tags:
      type: 'outbound'
      host: '{{.host}}'
      region: '{{.region}}'
      pod: 'rgw{{printf "%03.f" .podNum}}ea'
      target_host: 'www.toolkit.mapquestapi.com'
      target_ipaddr: '205.188.201.151'
      target_port: '80'
    # Field key/value pairs
    fields:
      # Value types: int, float, expfloat, normfloat
      example_int:
        type: 'int'
        # Minimum int value [default: -1000]
        min: -1000
        # Maximum int value [default: 1000]
        max: 1000
      example_float:
        type: 'float'
        # Minimum float value [default: -1.0]
        min: -1.0
        # Maximum float value [default: 1.0]
        max: 1.0
      # Exponentially distributed float, [0, max_float_64], with
      # given rate (lambda) and mean 1/lambda (1)
      example_expfloat:
        type: 'expfloat'
        # Exponential rate (lambda) [non-zero; default: 1.0]
        rate: 1.0
      # Normally distributed float with given standard deviation and mean
      example_normfloat:
        type: 'normfloat'
        # Standard deviation [non-zero; default: 1.0]
        stddev: 1.0
        # Mean [default: 0.0]
        mean: 0.0
      # Constant-value field
      example_constant:
        # Value can be any type supported by InfluxDB (int, float, string, bool)
        value: 'hello world'
    # Variables are used when templating measurement name, tags, and fields.
    # The series generates a point for every combination of variable values at
    # a given time.
    # See: https://golang.org/pkg/text/template/
    variables:
      # Variables are referenced by name in templates, e.g. {{.host}}
      - name: host
        # Explicit set of values
        values:
          - 'abc000wo.us-west-2.e2e.4.apigee.com'
          - 'rmp147ea.us-ea.4.apigee.com'
      - name: region
        values:
          - 'us-east-1'
          - 'us-west-2'
      - name: podNum
        # Numeric value (float). Values are generated starting
        # with `from`, ending with `to`, with an interval of `step`
        from: 0
        to: 3
        step: 1
